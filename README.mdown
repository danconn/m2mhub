# M2mhub: Web-based views of the Made2Manage database

Building custom reports in Made2Manage (M2M) is difficult and require logging in to M2M to use. M2mhub is a simple web-based interface to the M2M databse.  Though it is not a turn-key application, I would be interested in collaborating with others to make it more useful. Let me know if you're writing custom reports with Made2Manage and have any interest in sharing.

You're encouraged to join the <a href="http://groups.google.com/group/m2mhub?hl=en">m2mhub google group</a>.

## Connecting to SQLServer

The hardest part about any of this is just connecting your Rails app to a SQLServer database.  If you get discouraged, just remember this: "You can DO IT! I believe in you!"  Here are the main points in my setup. 

1. M2m 5.x.  Right now we're working with the old 5.54 version of M2M.  We'll be upgrading to the latest 6.x version over the next few months.  But for now my models are written against 5.x.
2. Rails 2 - The database we're connecting to is MSSQL 2000.  Woohoo!  activerecord-sqlserver-adapter 2.x is the only adapter I could get working with MSSQL 2000.  So we're Rails 2.  Again, in the next few months we'll be upgrading to SQLServer 2005 or 2008.  At that time I will be able to upgrade everything to Rails 3.
3. <a href="https://github.com/rails-sqlserver/tiny_tds">tiny_tds</a> and <a href="https://github.com/rails-sqlserver/activerecord-sqlserver-adapter">activerecord-sqlserver-adapter</a> - In the past, I've been able to activerecord-sqlserver-adapter to connect to SQLServer without tiny_tds. But it's a lot easier with tiny_tds.
4. <a href#"http://www.freetds.org/">FreeTDS</a> - Your best option for an ODBC driver on Linux or Mac OS.

## Basic Architecture

Our M2M databases run in our building. I believe this is a typical setup for M2M. So I setup a small Ubuntu server behind our firewall and give it a public IP address. Though I'm a big believer in the cloud, I don't see another way to do this. I feel ok opening up HTTPS access to my Ubuntu box. I would be much more nervous opening up access to our M2M database to some web app in the cloud.  

## Configuration with AppConfig

There are a lot of company-specific configuration needs in an ERP system. Everything from company name to how you want quantities and dates formatted. My abstraction for this is the AppConfig singleton. It's basically just a little method_missing wrapper around AppConfig which is an OpenStruct on top of yaml files.  app_config.yml is the starting point of all configurations. It contains configurations for all companies.

As I said, m2mhub is not a turn-key application. You'll notice that my two companies are referenced in the app_config.yml

## Reports

Here are the reports I've got so far. I am not building anything in a comprehensive manner. I am only building specific interactions that I know will be useful. So, for example, there is no customer search yet. That hasn't been as important as searching the item master.

Strangely, the most powerful part of this app is that I made almost everything clickable. That makes dashboard of recent sales orders (or quotes) a great launching point. You can click on the sales order, or the customer. And from either of those pages, you can click on the item. The initial goal is to make all sales information very easily accessible. This is surprisingly difficult in the M2M app itself.

### Quotes

This is simple crud around quotes. The index page is sorted in reverse chronological order. Quotes are more useful on the home page (dashboard) and on the customer view.

### Sales Orders

This is also simple crud around sales orders. Same as quotes, these are more useful in the context of a dashboard or viewing a customer.

### Customers

The customers index page is not usable at this point. A simple search would go far. Best way to get to a customer is via clickable links on recent quotes or sales orders.

The customer show page is intended to display as much reference information as possible about a single customer. This page should be useful to sales and sales engineers when speaking with a customer. It contains every previous sales order and quote. In particular, having a quick table mapping from customer part number to company-specific part number has been useful to sales engineers.

### Items

At this point items page is just a search. It searches by company and vendor part numbers. This has been been useful as a reference for engineers to look up vendor part numbers. It has also been useful for the shipping receiving department to find a company part number when a vendor only includes their own part number in a shipment.

The item show page lists all previous orders for the item. So you can quickly find customers that buy that part.

### Shippers

The shippers tab is organized by day. Each day shows all the shippers created for that day. Right now it's only showing basic information. Sales people find this useful to let the customer know that their product shipped, and the respective tracking number.

Each sales order page also shows any shippers for that order.  Likewise, an item page shows all past shippers.

### Home & User Activity

Right now the home page shows recent sales orders and quotes. This is just the quickest and easiest dashboard I could think of.  

It also shows user activity. User activity is a shameless big brother. This probably will not go well with most shops. But the goal is to assure people that it's secure. By providing a web interface to M2M, we're potentially exposing the company's most sensitive data. My intention is to assure people that I'm watching all activity. In practice, this has not been extremely useful. Real security would require some more thought. But since the matter is so important, I thought I would at *least* like to be able to see the raw activity. (logs do not count in my book)

## Future Plans

I'm planning on doing something with RMA's and integrating with Lighthouseapp.  I'm also planning on doing a custom shipping report.

## How To Share m2mhub

If people actually surfaced wanting to use m2mhub, we'd have to discuss the best way to collaborate. I see a lot of challenges in packaging something that can be easily dropped into another project. It's not clear to me how gems or plugins would be useful. At this point, I think copying each others code is a good option. :-) 